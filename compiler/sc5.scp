/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2007
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id: sc5.sch 3848 2007-11-20 11:48:34Z thiadmer $
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {111,110}, {116,32}, {105,110}, {97,114}, {116,105}, {100,32}, {115,32}, {101,114}, {37,115}, {97,108}, {101,110}, {133,129}, {34,137}, {141,34}, {117,110},
  {114,101}, {115,105}, {110,111}, {121,32}, {97,116}, {97,110}, {111,114}, {32,142}, {109,98}, {115,116}, {100,101}, {109,139}, {101,134}, {98,108}, {140,32}, {143,99},
  {111,108}, {102,159}, {114,97}, {146,130}, {118,138}, {115,121}, {165,152}, {166,160}, {117,115}, {97,32}, {105,134}, {115,145}, {97,157}, {132,162}, {150,32}, {103,32},
  {164,170}, {103,117}, {101,120}, {177,155}, {161,158}, {136,32}, {132,179}, {131,176}, {101,100}, {111,102}, {116,104}, {105,135}, {99,104}, {118,132}, {167,151}, {105,172},
  {189,191}, {154,102}, {173,147}, {185,32}, {109,97}, {116,111}, {99,129}, {101,135}, {112,144}, {182,130}, {98,128}, {153,148}, {44,32}, {190,41}, {40,205}, {168,130},
  {109,207}, {116,97}, {193,131}, {192,128}, {34,32}, {129,32}, {105,99}, {132,97}, {100,105}, {145,122}, {58,151}, {110,32}, {138,32}, {104,97}, {101,108}, {117,108},
  {99,111}, {108,111}, {109,148}, {198,153}, {111,112}, {97,115}, {108,128}, {228,136}, {161,140}, {227,149}, {149,32}, {200,171}, {131,175}, {208,202}, {102,105}, {119,105},
  {178,235}, {109,112}, {118,128}, {116,136}, {196,147}, {102,150}, {111,32}, {131,32}, {209,175}, {109,101}, {110,117}, {115,117}, {117,130}, {211,142}, {107,146}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*000*/  "*",   /* scpack does not like empty strings */
/*001*/  "expected token: \"%s\", but found \"%s\"",
/*002*/  "only a single statement (or expression) can follow each \"case\"",
/*003*/  "declaration of a local variable must appear in a compound block",
/*004*/  "function \"%s\" is not implemented",
/*005*/  "function may not have arguments",
/*006*/  "must be assigned to an array",
/*007*/  "operator cannot be redefined",
/*008*/  "must be a constant expression; assumed zero",
/*009*/  "invalid array size (negative, zero or out of bounds)",
/*010*/  "invalid function or declaration",
/*011*/  "invalid outside functions",
/*012*/  "invalid function call, not a valid address",
/*013*/  "no entry point (no public functions)",
/*014*/  "invalid statement; not in switch",
/*015*/  "\"default\" case must be the last case in switch statement",
/*016*/  "multiple defaults in \"switch\"",
/*017*/  "undefined symbol \"%s\"",
/*018*/  "initialization data exceeds declared size",
/*019*/  "not a label: \"%s\"",
/*020*/  "invalid symbol name \"%s\"",
/*021*/  "symbol already defined: \"%s\"",
/*022*/  "must be lvalue (non-constant)",
/*023*/  "array assignment must be simple assignment",
/*024*/  "\"break\" or \"continue\" is out of context",
/*025*/  "function heading differs from prototype",
/*026*/  "no matching \"#if...\"",
/*027*/  "invalid character constant",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"",
/*029*/  "invalid expression, assumed zero",
/*030*/  "compound statement not closed at the end of file (started at line %d)",
/*031*/  "unknown directive",
/*032*/  "array index out of bounds (variable \"%s\")",
/*033*/  "array must be indexed (variable \"%s\")",
/*034*/  "argument does not have a default value (argument %d)",
/*035*/  "argument type mismatch (argument %d)",
/*036*/  "empty statement",
/*037*/  "invalid string (possibly non-terminated string)",
/*038*/  "extra characters on line",
/*039*/  "constant symbol has no size",
/*040*/  "duplicate \"case\" label (value %d)",
/*041*/  "invalid ellipsis, array size is not known",
/*042*/  "invalid combination of class specifiers",
/*043*/  "character constant exceeds range for packed string",
/*044*/  "positional parameters must precede all named parameters",
/*045*/  "too many function arguments",
/*046*/  "unknown array size (variable \"%s\")",
/*047*/  "array sizes do not match, or destination array is too small",
/*048*/  "array dimensions do not match",
/*049*/  "invalid line continuation",
/*050*/  "invalid range",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions",
/*052*/  "multi-dimensional arrays must be fully initialized",
/*053*/  "exceeding maximum number of dimensions",
/*054*/  "unmatched closing brace (\"}\")",
/*055*/  "start of function body without function header",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")",
/*057*/  "unfinished expression before compiler directive",
/*058*/  "duplicate argument; same argument is passed twice",
/*059*/  "function argument may not have a default value (variable \"%s\")",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive",
/*062*/  "number of operands does not fit the operator",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"",
/*064*/  "cannot change predefined operators",
/*065*/  "function argument may only have a single tag (argument %d)",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")",
/*068*/  "invalid rational number precision in #pragma",
/*069*/  "rational number format already defined",
/*070*/  "rational number support was not enabled",
/*071*/  "user-defined operator must be declared before use (function \"%s\")",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols",
/*073*/  "function argument must be an array (argument \"%s\")",
/*074*/  "#define pattern must start with an alphabetic character",
/*075*/  "input line too long (after substitutions)",
/*076*/  "syntax error in the expression, or invalid function call",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s",
/*078*/  "function uses both \"return\" and \"return <value>\"",
/*079*/  "inconsistent return types (array & non-array)",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")",
/*082*/  "user-defined operators and native functions may not have states",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")",
/*085*/  "no states are defined for symbol \"%s\"",
/*086*/  "unknown automaton \"%s\"",    //!!!
/*087*/  "unknown state \"%s\" for automaton \"%s\"",   //!!!
/*088*/  "public variables and local variables may not have states (symbol \"%s\")",
/*089*/  "state variables may not be initialized (symbol \"%s\")",
/*090*/  "public functions may not return arrays (symbol \"%s\")",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")"
#else
  "*",
  "\262pect\234\305k\213\332\314b\374fo\217\206\216",
  "\201l\223\251s\203g\346\313e\233\202(\256\360\201) c\352f\240\341w ea\274 \042c\345e\042",
  "\232cl\327\236\303\251\341c\334\323\320appe\204 \367\251\340\361o\217\206\235ock",
  "\350\227 \273\243i\361le\233t\270",
  "\264\364\243\335\362\266ts",
  "\355a\253gn\234\305 \352\255y",
  "\347\224\256c\225\243\312\220\322\270",
  "\355\251\351\202\360\201; \345\373m\234z\210o",
  "\267\302\331\200(nega\205ve\314z\210\366\256o\374\303bo\217ds)",
  "\267\264\256\232cl\327\214",
  "\267out\221d\200\350s",
  "\267\264c\212l\314\243\251\260add\220ss",
  "\222 \213tr\223po\203\202(\222 pu\235\326 \350s)",
  "\267\313e\233t; \243\367s\357t\274",
  "\042\301a\337t\324c\345\200\355\272\200l\345\202c\345\200\367s\357t\274 \313e\233t",
  "m\337\205p\346\301a\337t\207\367\042s\357t\274\042",
  "\217\322\234\276",
  "\203i\205\212iza\236d\224\251\262ce\270\207\232cl\204\234\331e",
  "\243\251lab\336\332",
  "\267\247 nam\200\216",
  "\247 \212\220ad\223\322\270\332",
  "\355l\244u\200(n\201-\351t)",
  "\302a\253gn\233\202\355\221\361\346a\253gn\233t",
  "\042b\220ak\324\256\042\306t\203ue\324\273o\374\303\306t\262t",
  "\264head\354\330ff\210\207from pro\305type",
  "\222 \342\274\354\042#if...\042",
  "\267\274\327ct\265\351t",
  "\267\373bscrip\202(\243\352\302\256\305\366m\225\223\373bscripts)\332",
  "\267\360\201\314\345\373m\234z\210o",
  "\340\361o\217\206\313e\233\202\243c\341s\234a\202\272\200\213\206\303\356\346(\231\204t\234a\202l\203\200%d)",
  "\217\376w\333\330\220c\205ve",
  "\302\203\232x o\374\303bo\217d\207(\375)",
  "\302\355\203\232x\234(\375)",
  "\311do\307\243\335\362\251\301a\337\202\244u\200(\311%d)",
  "\311typ\200mis\342\274 (\311%d)",
  "e\361t\223\313e\233t",
  "\267\231r\354(po\253\235\223n\201-\363m\203\224\234\231r\203g)",
  "\262t\242 \274\327c\363\207\325l\203e",
  "\351\202\247 \335\207\222 \331e",
  "dupl\326\224\200\042c\345e\324lab\336 (\244u\200%d)",
  "\267\336lip\221s\314\302\331\200\273\243\376wn",
  "\267\340\230\203a\236\303cl\345\207speci\356\210s",
  "\274\327ct\265\351\202\262ce\270\207r\225g\200f\256pack\234\231r\203g",
  "po\221\214\334p\327\371\363\207\320\310c\270\200\212l nam\234p\327\371\363s",
  "\305\366m\225\223\264\266ts",
  "\217\376w\333\302\331\200(\375)",
  "\302\331\307d\366\243\342\274\314\256\232\231\203a\236\302\273\305\366sm\212l",
  "\302\330\233\221\201\207d\366\243\342\274",
  "\267l\203\200\306t\203ua\214",
  "\267r\225ge",
  "\267\373bscript\314\250\200\042[ ]\324\347\224\226\207\325\304j\256\330\233\221\201s",
  "m\337\205-\330\233\221\201\334\255y\207\355f\337l\223\203i\205\212iz\270",
  "\262ce\270\354\304ximum \372\230\265\303\330\233\221\201s",
  "\217\342\274\234c\341s\354b\242c\200(\042}\042)",
  "\231\204\202\303\264bod\223\357\272o\374\264head\210",
  "\255ys\314\341c\334\300\307\225\206\264\266t\207c\225\243\312pu\235\326 (\375)",
  "\217f\203ish\234\360\325be\365\200\340\361il\265\330\220c\205ve",
  "dupl\326\224\200\266t; sam\200\311\273p\345s\234tw\326e",
  "\264\311\364\243\335\362\251\301a\337\202\244u\200(\375)",
  "m\337\205p\346\042#\336se\324\330\220c\205v\307betwe\213 \042#if ... #\213\330f\042",
  "\042#\336seif\324\330\220c\205\362f\240\341w\207\352\042#\336se\324\330\220c\205ve",
  "\372\230\265\303\347\225d\207do\307\243\356\202\272\200\347\224\226",
  "\264\220s\337\202\370\303\347\224\226\227 \355\216",
  "c\225\243\274\225g\200\310\322\234\347\224\226s",
  "\264\311\364\201l\223\335\362\251s\203g\346\370(\311%d)",
  "\264\311\364\243\312\251\220f\210\213c\200\311\256\352\302(\311\216)",
  "\323c\225\243\312bo\272 \251\220f\210\213c\200\225\206\352\302(\375)",
  "\267\242\214\334\372\230\265\310ci\221\325\367#p\242g\304",
  "\242\214\334\372\230\265\365\304\202\212\220ad\223\322\270",
  "\242\214\334\372\230\265\373pp\226\202wa\207\243\213\254\270",
  "\250\210-\322\234\347\224\256\355\232cl\204\234be\365\200\250\200(\350\227)",
  "\042\331e\271\324\347\224\256\273\267\325\042\350\324\247s",
  "\264\311\355\352\302(\311\216)",
  "#\322\200p\224\363\333\320\231\204\202\357\272 \352\212p\335be\205c \274\327c\363",
  "\203p\374l\203\200\305\366l\201\257(aft\265\373bs\205tu\214s)",
  "\245n\321x \210r\256\367\272\200\360\201\314\256\267\264c\212l",
  "m\212\365m\234UTF-8 \213\340d\203g\314\256c\226rupt\234\356le: \211",
  "\264\250\307bo\272 \042\220turn\324\225\206\042\220tur\333<\244ue>\042",
  "\203\306\221\231\213\202\220tur\333typ\307(\302& n\201-\255y)",
  "\217\376w\333\247\314\256\243\251\351\202\247 \316",
  "c\225\243\321k\200\251\370a\207\251\301a\337\202\244u\200f\256\352\203\232x\234\302p\327\371t\265\316",
  "\250\210-\322\234\347\224\226\207\225\206na\205\362\350\207\364\243\335\362\313es",
  "\251\264\256\323\364\201l\223b\336\201\257\305 \251s\203g\346au\305\342\325\316",
  "\313\200\306fl\326t: \201\200\303\272\200\313\307\273\212\220ad\223a\253gn\234\305 a\222\272\265i\361le\233\321\236\316",
  "\222 \313\307\204\200\322\234f\256\276",
  "\217\376w\333au\305\342\201\227",
  "\217\376w\333\313\200\216 f\256au\305\342\201\227",
  "pu\235\326 \300\307\225\206\341c\334\300\307\364\243\335\362\313\307\316",
  "\313\200\300\307\364\243\312\203i\205\212iz\234\316",
  "pu\235\326 \350\207\364\243\220tur\333\255y\207\316",
  "a\230i\261ou\207\351t; \370ov\210rid\200\273\220qui\220\206\316"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*100*/  "cannot read from file: \"%s\"",
/*101*/  "cannot write to file: \"%s\"",
/*102*/  "table overflow: \"%s\"",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*103*/  "insufficient memory",
/*104*/  "invalid assembler instruction \"%s\"",
/*105*/  "numeric overflow, exceeding capacity",
/*106*/  "compiled script exceeds the maximum memory size (%ld bytes)",
/*107*/  "too many error messages on one line",
/*108*/  "codepage mapping file not found",
/*109*/  "invalid path: \"%s\"",
/*110*/  "assertion failed: %s",
/*111*/  "user error: %s"
/*112*/  "overlay function exceeds limit by %ld bytes"
#else
  "c\225\243\220a\206from \356le\332",
  "c\225\243writ\200\305 \356le\332",
  "t\254\200ov\210f\341w\332",
  "\203\373ff\326i\213\202\371m\226y",
  "\267\345se\230l\265\203\231ruc\214\227",
  "\372m\210\326 ov\210f\341w\314\262ce\270\354capacity",
  "\340\361il\234scrip\202\262ce\270\207\272\200\304ximum \371m\226\223\331\200(%l\206bytes)",
  "\305\366m\225\223\210r\256\371ssag\307\325\201\200l\203e",
  "\340\232pag\200\304pp\354\356\346\243fo\217d",
  "\267p\224h\332",
  "\345s\210\236fail\270: \211",
  "\250\265\210r\226: \211",
  "ov\210la\223\264\262ce\270\207limi\202b\223%l\206bytes"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters",
/*201*/  "redefinition of constant/macro (symbol \"%s\")",
/*202*/  "number of arguments does not match definition",
/*203*/  "symbol is never used: \"%s\"",
/*204*/  "symbol is assigned a value that is never used: \"%s\"",
/*205*/  "redundant code: constant expression is zero",
/*206*/  "redundant test: constant expression is non-zero",
/*207*/  "unknown #pragma",
/*208*/  "function with tag result used before definition, forcing reparse",
/*209*/  "function \"%s\" should return a value",
/*210*/  "possible use of symbol before initialization: \"%s\"",
/*211*/  "possibly unintended assignment",
/*212*/  "possibly unintended bitwise operation",
/*213*/  "tag mismatch",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"",
/*215*/  "expression has no effect",
/*216*/  "nested comment",
/*217*/  "loose indentation",
/*218*/  "old style prototypes used with optional semicolumns",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level",
/*220*/  "expression with tag override must appear between parentheses",
/*221*/  "label name \"%s\" shadows tag name",
/*222*/  "number of digits exceeds rational number precision",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")",
/*225*/  "unreachable code",
/*226*/  "a variable is assigned to itself (symbol \"%s\")",
/*227*/  "more initiallers than enum fields",
/*228*/  "length of initialler exceeds size of the enum field",
/*229*/  "index tag mismatch (symbol \"%s\")",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back",
/*231*/  "state specification on forward declaration is ignored",
/*232*/  "output file is written, but with compact encoding disabled",
/*233*/  "state variable \"%s\" shadows a global variable",
/*234*/  "function is deprecated (symbol \"%s\") %s",
/*235*/  "public function lacks forward declaration (symbol \"%s\")",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)",
/*237*/  "recursive function \"%s\""
#else
  "\276 \273tr\237\224\234\305 %\206\274\327c\363s",
  "\220\322i\236\303\351t/\304cr\366\316",
  "\372\230\265\303\266t\207do\307\243\342\274 \322i\214",
  "\247 \273nev\265\250\270\332",
  "\247 \273a\253gn\234\251\244u\200\272a\202\273nev\265\250\270\332",
  "\220d\217d\225\202\340\232: \351\202\360\325\273z\210o",
  "\220d\217d\225\202te\231: \351\202\360\325\273n\201-z\210o",
  "\217\376w\333#p\242g\304",
  "\264\357\272 \370\220s\337\202\250\234be\365\200\322i\214\314\365c\354\220p\204se",
  "\350\227 sho\337\206\220tur\333\251\244ue",
  "po\253\235\200\250\200\303\247 be\365\200\203i\205\212iza\214\332",
  "po\253\235\223\217\203t\213\232\206a\253gn\233t",
  "po\253\235\223\217\203t\213\232\206bit\357s\200\347a\214",
  "\370mis\342\274",
  "po\253\235\223\251\042\343\324\302\311wa\207\203t\213\232d\332",
  "\360\325\335\207\222 effect",
  "ne\231\234\340m\233t",
  "\341os\200\203d\213\321\214",
  "\240\206\231y\346pro\305typ\307\250\234\357\272 \344\214\334sem\326\240umns",
  "\341c\334\375 s\335dow\207\251\323a\202\251\310c\270\354lev\336",
  "\360\325\357\272 \370ov\210rid\200\320appe\204 betwe\213 p\204\213\272eses",
  "lab\336 nam\200\216 s\335dow\207\370na\371",
  "\372\230\265\303\330git\207\262ce\270\207\242\214\334\372\230\265\310ci\221\201",
  "\220d\217d\225\202\042\331e\271\042: \311\331\200\273\212way\2071 \316",
  "\203\232\363m\203\224\200\302\331\200\367\042\331e\271\324\360\325\316",
  "\217\220a\274\254\200\340\232",
  "\251\323\273a\253gn\234\305 its\336f \316",
  "m\226\200\203i\205\212l\210\207\272\352\213um \356\336ds",
  "l\213g\272 \303\203i\205\212l\265\262ce\270\207\331\200\303\272\200\213um \356\336d",
  "\203\232x \370mis\342\274 \316",
  "\222 i\361le\233\321\236f\256\313\200\216 \367\350\227\314\222 f\212l-back",
  "\313\200specif\326a\236\325\365w\204\206\232cl\327\236\273ig\222\220d",
  "outp\374\356\346\273writt\213\314b\374\357\272 \340\361ac\202\213\340d\354\330s\254\270",
  "\313\200\375 s\335dow\207\251g\341b\334\300e",
  "\264\273\232\310c\224\234\316 \211",
  "pu\235\326 \264lack\207\365w\204\206\232cl\327\236\316",
  "\217\376w\333p\327\371t\265\367\373bs\205tu\236(\203c\226\220c\202#\322\200p\224\363n)",
  "\220cur\221\362\350\227"
#endif
       };

static char *noticemsg[] = {
#ifdef SCPACK
/*000*/  "*",   /* scpack does not like empty strings */
/*001*/  "did you mean \"%s\"?"
#else
  "*",
  "d\252you \371\225\227?"
#endif
       };
