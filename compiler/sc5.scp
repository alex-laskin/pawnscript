/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2008
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id: sc5.sch 3925 2008-03-03 16:08:45Z thiadmer $
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {111,110}, {116,32}, {105,110}, {97,114}, {116,105}, {100,32}, {115,32}, {101,114}, {37,115}, {101,110}, {133,129}, {97,108}, {34,137}, {141,34}, {117,110},
  {114,101}, {115,105}, {110,111}, {121,32}, {97,116}, {97,110}, {111,114}, {32,142}, {115,116}, {109,98}, {100,101}, {109,138}, {98,108}, {101,134}, {139,32}, {143,99},
  {111,108}, {102,159}, {114,97}, {146,130}, {118,140}, {115,121}, {165,153}, {166,160}, {117,115}, {97,32}, {103,32}, {105,134}, {115,145}, {97,156}, {132,162}, {150,32},
  {164,171}, {103,117}, {101,120}, {177,155}, {161,158}, {136,32}, {132,179}, {131,176}, {101,100}, {111,102}, {116,104}, {105,135}, {99,104}, {118,132}, {167,151}, {105,173},
  {189,191}, {154,102}, {116,111}, {99,129}, {174,147}, {185,32}, {109,97}, {101,135}, {112,144}, {182,130}, {98,128}, {152,148}, {44,32}, {190,41}, {40,205}, {168,130},
  {109,207}, {116,97}, {193,131}, {192,128}, {34,32}, {129,32}, {104,97}, {105,99}, {132,97}, {100,105}, {145,122}, {109,148}, {58,151}, {110,32}, {140,32}, {131,170},
  {101,108}, {117,108}, {99,111}, {108,111}, {112,136}, {195,152}, {97,115}, {149,130}, {108,128}, {161,139}, {102,150}, {131,32}, {149,32}, {200,172}, {208,202}, {109,101},
  {111,228}, {102,105}, {119,105}, {178,237}, {109,112}, {111,117}, {118,128}, {116,136}, {198,147}, {111,32}, {209,170}, {110,117}, {115,117}, {211,142}, {107,146}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*000*/  "*",   /* scpack does not like empty strings */
/*001*/  "expected token: \"%s\", but found \"%s\"",
/*002*/  "only a single statement (or expression) can follow each \"case\"",
/*003*/  "declaration of a local variable must appear in a compound block",
/*004*/  "function \"%s\" is not implemented",
/*005*/  "function may not have arguments",
/*006*/  "must be assigned to an array",
/*007*/  "operator cannot be redefined",
/*008*/  "must be a constant expression; assumed zero",
/*009*/  "invalid array size (negative, zero or out of bounds)",
/*010*/  "invalid function or declaration",
/*011*/  "invalid outside functions",
/*012*/  "invalid function call, not a valid address",
/*013*/  "no entry point (no public functions)",
/*014*/  "invalid statement; not in switch",
/*015*/  "\"default\" case must be the last case in switch statement",
/*016*/  "multiple defaults in \"switch\"",
/*017*/  "undefined symbol \"%s\"",
/*018*/  "initialization data exceeds declared size",
/*019*/  "not a label: \"%s\"",
/*020*/  "invalid symbol name \"%s\"",
/*021*/  "symbol already defined: \"%s\"",
/*022*/  "must be lvalue (non-constant)",
/*023*/  "array assignment must be simple assignment",
/*024*/  "\"break\" or \"continue\" is out of context",
/*025*/  "function heading differs from prototype",
/*026*/  "no matching \"#if...\"",
/*027*/  "invalid character constant",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"",
/*029*/  "invalid expression, assumed zero",
/*030*/  "compound statement not closed at the end of file (started at line %d)",
/*031*/  "unknown directive",
/*032*/  "array index out of bounds (variable \"%s\")",
/*033*/  "array must be indexed (variable \"%s\")",
/*034*/  "argument does not have a default value (argument %d)",
/*035*/  "argument type mismatch (argument %d)",
/*036*/  "empty statement",
/*037*/  "invalid string (possibly non-terminated string)",
/*038*/  "extra characters on line",
/*039*/  "constant symbol has no size",
/*040*/  "duplicate \"case\" label (value %d)",
/*041*/  "invalid ellipsis, array size is not known",
/*042*/  "invalid combination of class specifiers",
/*043*/  "character constant exceeds range for packed string",
/*044*/  "positional parameters must precede all named parameters",
/*045*/  "too many function arguments",
/*046*/  "unknown array size (variable \"%s\")",
/*047*/  "array sizes do not match, or destination array is too small",
/*048*/  "array dimensions do not match",
/*049*/  "invalid line continuation",
/*050*/  "invalid range",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions",
/*052*/  "multi-dimensional arrays must be fully initialized",
/*053*/  "exceeding maximum number of dimensions",
/*054*/  "unmatched closing brace (\"}\")",
/*055*/  "start of function body without function header",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")",
/*057*/  "unfinished expression before compiler directive",
/*058*/  "duplicate argument; same argument is passed twice",
/*059*/  "function argument may not have a default value (variable \"%s\")",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive",
/*062*/  "number of operands does not fit the operator",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"",
/*064*/  "cannot change predefined operators",
/*065*/  "function argument may only have a single tag (argument %d)",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")",
/*068*/  "invalid rational number precision in #pragma",
/*069*/  "rational number format already defined",
/*070*/  "rational number support was not enabled",
/*071*/  "user-defined operator must be declared before use (function \"%s\")",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols",
/*073*/  "function argument must be an array (argument \"%s\")",
/*074*/  "#define pattern must start with an alphabetic character",
/*075*/  "input line too long (after substitutions)",
/*076*/  "syntax error in the expression, or invalid function call",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s",
/*078*/  "function uses both \"return\" and \"return <value>\"",
/*079*/  "inconsistent return types (array & non-array)",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")",
/*082*/  "user-defined operators and native functions may not have states",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")",
/*085*/  "no states are defined for symbol \"%s\"",
/*086*/  "unknown automaton \"%s\"",    //!!!
/*087*/  "unknown state \"%s\" for automaton \"%s\"",   //!!!
/*088*/  "public variables and local variables may not have states (symbol \"%s\")",
/*089*/  "state variables may not be initialized (symbol \"%s\")",
/*090*/  "public functions may not return arrays (symbol \"%s\")",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")"
#else
  "*",
  "\262pect\235\302k\212\334\314bu\202fo\217\206\216",
  "\201l\223\251s\203g\350\313e\233\202(\257\363\201) c\354f\240\343w ea\274 \042c\346e\042",
  "\232cl\330\236\305\251\343c\336\323\320appe\204 \353\251\342\364o\217\206\234ock",
  "\351\227 \273\243i\364le\233t\270",
  "\264\370\243\326\366\266ts",
  "\356a\254gn\235\302 \354\256y",
  "\360\224\257c\225\243\312\220\322\270",
  "\356\251\345\347\363\201; \346\374m\235z\210o",
  "\267\304\332\200(nega\205ve\314z\210\371\257\365\202\305bo\217ds)",
  "\267\264\257\232cl\330\213",
  "\267\365t\221d\200\351s",
  "\267\264c\214l\314\243\251\260add\220ss",
  "\222 \212tr\223po\203\202(\222 pu\234\327 \351s)",
  "\267\313e\233t; \243\353s\362t\274",
  "\042\301a\341t\324c\346\200\356\272\200l\346\202c\346\200\353s\362t\274 \313e\233t",
  "m\341\205p\350\301a\341t\207\353\042s\362t\274\042",
  "\217\322\235\276",
  "\203i\205\214iza\236d\224\251\262ce\270\207\232cl\204\235\332e",
  "\243\251lab\340\334",
  "\267\247 nam\200\216",
  "\247 \214\220ad\223\322\270\334",
  "\356l\244u\200(n\201-\345\225t)",
  "\304a\254gn\233\202\356\221\364\350a\254gn\233t",
  "\042b\220ak\324\257\042\303t\203ue\324\273\365\202\305\303t\262t",
  "\264head\337\331ff\210\207from pro\302type",
  "\222 \333\274\337\042#if...\042",
  "\267\274\330ct\265\345\225t",
  "\267\374bscrip\202(\243\354\304\257\302\371m\225\223\374bscripts)\334",
  "\267\363\201\314\346\374m\235z\210o",
  "\342\364o\217\206\313e\233\202\243c\343s\235a\202\272\200\212\206\305\361\350(\230\204t\235a\202l\203\200%d)",
  "\217\376w\335\331\220c\205ve",
  "\304\203\232x \365\202\305bo\217d\207(\375)",
  "\304\356\203\232x\235(\375)",
  "\311do\307\243\326\366\251\301a\341\202\244u\200(\311%d)",
  "\311typ\200mis\333\274 (\311%d)",
  "e\364t\223\313e\233t",
  "\267\230r\337(po\254\234\223n\201-\367m\203\224\235\230r\203g)",
  "\262t\242 \274\330c\367\207\325l\203e",
  "\345\347\247 \326\207\222 \332e",
  "dupl\327\224\200\042c\346e\324lab\340 (\244u\200%d)",
  "\267\340lip\221s\314\304\332\200\273\243\376wn",
  "\267\342\231\203a\236\305cl\346\207speci\361\210s",
  "\274\330ct\265\345\347\262ce\270\207r\225g\200f\257pack\235\230r\203g",
  "po\221\213\336p\330\357\367\207\320\310c\270\200\214l nam\235p\330\357\367s",
  "\302\371m\225\223\264\266ts",
  "\217\376w\335\304\332\200(\375)",
  "\304\332\307d\371\243\333\274\314\257\232\230\203a\236\304\273\302\371sm\214l",
  "\304\331\233\221\201\207d\371\243\333\274",
  "\267l\203\200\303t\203ua\213",
  "\267r\225ge",
  "\267\374bscript\314\250\200\042[ ]\324\360\224\226\207\325\306j\257\331\233\221\201s",
  "m\341\205-\331\233\221\201\336\256y\207\356f\341l\223\203i\205\214iz\270",
  "\262ce\270\337\306ximum \373\231\265\305\331\233\221\201s",
  "\217\333\274\235c\343s\337b\242c\200(\042}\042)",
  "\230\204\202\305\264bod\223\362\272\365\202\264head\210",
  "\256ys\314\343c\336\300\307\225\206\264\266t\207c\225\243\312pu\234\327 (\375)",
  "\217f\203ish\235\363\325be\352\200\342\364il\265\331\220c\205ve",
  "dupl\327\224\200\266t; sam\200\311\273p\346s\235tw\327e",
  "\264\311\370\243\326\366\251\301a\341\202\244u\200(\375)",
  "m\341\205p\350\042#\340se\324\331\220c\205v\307betwe\212 \042#if ... #\212\331f\042",
  "\042#\340seif\324\331\220c\205\366f\240\343w\207\354\042#\340se\324\331\220c\205ve",
  "\373\231\265\305\360\225d\207do\307\243\361\202\272\200\360\224\226",
  "\264\220s\341\202\372\305\360\224\226\227 \356\216",
  "c\225\243\274\225g\200\310\322\235\360\224\226s",
  "\264\311\370\201l\223\326\366\251s\203g\350\372(\311%d)",
  "\264\311\370\243\312\251\220f\210\212c\200\311\257\354\304(\311\216)",
  "\323c\225\243\312bo\272 \251\220f\210\212c\200\225\206\354\304(\375)",
  "\267\242\213\336\373\231\265\310ci\221\325\353#p\242g\306",
  "\242\213\336\373\231\265\352\306\202\214\220ad\223\322\270",
  "\242\213\336\373\231\265\374pp\226\202wa\207\243\212\255\270",
  "\250\210-\322\235\360\224\257\356\232cl\204\235be\352\200\250\200(\351\227)",
  "\042\332e\271\324\360\224\257\273\267\325\042\351\324\247s",
  "\264\311\356\354\304(\311\216)",
  "#\322\200p\224\367\335\320\230\204\202\362\272 \354\214p\326be\205c \274\330c\367",
  "\203pu\202l\203\200\302\371l\201\252(aft\265\374bs\205tu\213s)",
  "\245n\321x \210r\257\353\272\200\363\201\314\257\267\264c\214l",
  "m\214\352m\235UTF-8 \212\342d\203g\314\257c\226rupt\235\361le: \211",
  "\264\250\307bo\272 \042\220turn\324\225\206\042\220tur\335<\244ue>\042",
  "\203\303\221\230\212\202\220tur\335typ\307(\304& n\201-\256y)",
  "\217\376w\335\247\314\257\243\251\345\347\247 \316",
  "c\225\243\321k\200\251\372a\207\251\301a\341\202\244u\200f\257\354\203\232x\235\304p\330\357t\265\316",
  "\250\210-\322\235\360\224\226\207\225\206na\205\366\351\207\370\243\326\366\313es",
  "\251\264\257\323\370\201l\223b\340\201\252\302 \251s\203g\350au\302\333\325\316",
  "\313\200\303fl\327t: \201\200\305\272\200\313\307\273\214\220ad\223a\254gn\235\302 a\222\272\265i\364le\233\321\236\316",
  "\222 \313\307\204\200\322\235f\257\276",
  "\217\376w\335au\302\333\201\227",
  "\217\376w\335\313\200\216 f\257au\302\333\201\227",
  "pu\234\327 \300\307\225\206\343c\336\300\307\370\243\326\366\313\307\316",
  "\313\200\300\307\370\243\312\203i\205\214iz\235\316",
  "pu\234\327 \351\207\370\243\220tur\335\256y\207\316",
  "a\231i\261\365\207\345\225t; \372ov\210rid\200\273\220qui\220\206\316"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*100*/  "cannot read from file: \"%s\"",
/*101*/  "cannot write to file: \"%s\"",
/*102*/  "table overflow: \"%s\"",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*103*/  "insufficient memory",
/*104*/  "invalid assembler instruction \"%s\"",
/*105*/  "numeric overflow, exceeding capacity",
/*106*/  "compiled script exceeds the maximum memory size (%ld bytes)",
/*107*/  "too many error messages on one line",
/*108*/  "codepage mapping file not found",
/*109*/  "invalid path: \"%s\"",
/*110*/  "assertion failed: %s",
/*111*/  "user error: %s"
/*112*/  "overlay function exceeds limit by %ld bytes"
#else
  "c\225\243\220a\206from \361le\334",
  "c\225\243writ\200\302 \361le\334",
  "t\255\200ov\210f\343w\334",
  "\203\374ff\327i\212\202\357m\226y",
  "\267\346se\231l\265\203\230ruc\213\227",
  "\373m\210\327 ov\210f\343w\314\262ce\270\337capacity",
  "\342\364il\235scrip\202\262ce\270\207\272\200\306ximum \357m\226\223\332\200(%l\206bytes)",
  "\302\371m\225\223\210r\257\357ssag\307\325\201\200l\203e",
  "\342\232pag\200\306pp\337\361\350\243fo\217d",
  "\267p\224h\334",
  "\346s\210\236fail\270: \211",
  "\250\265\210r\226: \211",
  "ov\210la\223\264\262ce\270\207limi\202b\223%l\206bytes"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters",
/*201*/  "redefinition of constant/macro (symbol \"%s\")",
/*202*/  "number of arguments does not match definition",
/*203*/  "symbol is never used: \"%s\"",
/*204*/  "symbol is assigned a value that is never used: \"%s\"",
/*205*/  "redundant code: constant expression is zero",
/*206*/  "redundant test: constant expression is non-zero",
/*207*/  "unknown #pragma",
/*208*/  "function with tag result used before definition, forcing reparse",
/*209*/  "function \"%s\" should return a value",
/*210*/  "possible use of symbol before initialization: \"%s\"",
/*211*/  "possibly unintended assignment",
/*212*/  "possibly unintended bitwise operation",
/*213*/  "tag mismatch",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"",
/*215*/  "expression has no effect",
/*216*/  "nested comment",
/*217*/  "loose indentation",
/*218*/  "old style prototypes used with optional semicolons",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level",
/*220*/  "expression with tag override must appear between parentheses",
/*221*/  "label name \"%s\" shadows tag name",
/*222*/  "number of digits exceeds rational number precision",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")",
/*225*/  "unreachable code",
/*226*/  "a variable is assigned to itself (symbol \"%s\")",
/*227*/  "more initiallers than enum fields",
/*228*/  "length of initialler exceeds size of the enum field",
/*229*/  "index tag mismatch (symbol \"%s\")",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back",
/*231*/  "state specification on forward declaration is ignored",
/*232*/  "output file is written, but with compact encoding disabled",
/*233*/  "state variable \"%s\" shadows a global variable",
/*234*/  "function is deprecated (symbol \"%s\") %s",
/*235*/  "public function lacks forward declaration (symbol \"%s\")",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)",
/*237*/  "recursive function \"%s\"",
/*238*/  "mixing string formats in concatenation"
#else
  "\276 \273tr\237\224\235\302 %\206\274\330c\367s",
  "\220\322i\236\305\345\225t/\306cr\371\316",
  "\373\231\265\305\266t\207do\307\243\333\274 \322i\213",
  "\247 \273nev\265\250\270\334",
  "\247 \273a\254gn\235\251\244u\200\272a\202\273nev\265\250\270\334",
  "\220d\217d\347\342\232: \345\347\363\325\273z\210o",
  "\220d\217d\347te\230: \345\347\363\325\273n\201-z\210o",
  "\217\376w\335#p\242g\306",
  "\264\362\272 \372\220s\341\202\250\235be\352\200\322i\213\314\352c\337\220p\204se",
  "\351\227 sho\341\206\220tur\335\251\244ue",
  "po\254\234\200\250\200\305\247 be\352\200\203i\205\214iza\213\334",
  "po\254\234\223\217\203t\212\232\206a\254gn\233t",
  "po\254\234\223\217\203t\212\232\206bit\362s\200\360a\213",
  "\372mis\333\274",
  "po\254\234\223\251\042\345\324\304\311wa\207\203t\212\232d\334",
  "\363\325\326\207\222 effect",
  "ne\230\235\342m\233t",
  "\343os\200\203d\212\321\213",
  "\240\206\230y\350pro\302typ\307\250\235\362\272 op\213\336sem\327\240\201s",
  "\343c\336\375 s\326dow\207\251\323a\202\251\310c\270\337lev\340",
  "\363\325\362\272 \372ov\210rid\200\320appe\204 betwe\212 p\204\212\272eses",
  "lab\340 nam\200\216 s\326dow\207\372na\357",
  "\373\231\265\305\331git\207\262ce\270\207\242\213\336\373\231\265\310ci\221\201",
  "\220d\217d\347\042\332e\271\042: \311\332\200\273\214way\2071 \316",
  "\203\232\367m\203\224\200\304\332\200\353\042\332e\271\324\363\325\316",
  "\217\220a\274\255\200\342\232",
  "\251\323\273a\254gn\235\302 its\340f \316",
  "m\226\200\203i\205\214l\210\207\272\354\212um \361\340ds",
  "l\212g\272 \305\203i\205\214l\265\262ce\270\207\332\200\305\272\200\212um \361\340d",
  "\203\232x \372mis\333\274 \316",
  "\222 i\364le\233\321\236f\257\313\200\216 \353\351\227\314\222 f\214l-back",
  "\313\200specif\327a\236\325\352w\204\206\232cl\330\236\273ig\222\220d",
  "\365tpu\202\361\350\273writt\212\314bu\202\362\272 \342\364ac\202\212\342d\337\331s\255\270",
  "\313\200\375 s\326dow\207\251g\343b\336\300e",
  "\264\273\232\310c\224\235\316 \211",
  "pu\234\327 \264lack\207\352w\204\206\232cl\330\236\316",
  "\217\376w\335p\330\357t\265\353\374bs\205tu\236(\203c\226\220c\202#\322\200p\224\367n)",
  "\220cur\221\366\351\227",
  "mix\337\230r\337\352\333\207\353\303c\224\212a\213"
#endif
       };

static char *noticemsg[] = {
#ifdef SCPACK
/*000*/  "*",   /* scpack does not like empty strings */
/*001*/  "did you mean \"%s\"?"
/*002*/  "perhaps you meant to use double quotes"
#else
  "*",
  "d\253y\365 \357\225\227?",
  "\344\326p\207y\365 \357\347\302 \250\200d\365\234\200quotes"
#endif
       };
